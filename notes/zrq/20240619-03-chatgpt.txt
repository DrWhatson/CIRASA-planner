#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Try running ChatGPT's polymorphic example.

    Result:

        A working polymorphic webapp :-)
        ChatGPT writes better code than openapi-generator.


# -----------------------------------------------------
# Prompt : "can you modify the example to show how fastapi would use a discriminator property to indicate the class type"

Certainly! To use a discriminator property in FastAPI, you need to define
a field in your base model that indicates the specific type of each item.
This is useful for deserialization when you need to distinguish between different subtypes.

Here’s how you can modify the previous example to include a discriminator property:

### OpenAPI Specification

First, let’s update the OpenAPI specification to include a discriminator:

```yaml
openapi: 3.0.0
info:
  title: Item API
  version: 1.0.0
paths:
  /items:
    get:
      summary: Get a list of items
      responses:
        '200':
          description: A list of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
    post:
      summary: Add a new item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Item created
components:
  schemas:
    Item:
      type: object
      discriminator:
        propertyName: item_type
      required:
        - item_type
      properties:
        item_type:
          type: string
      oneOf:
        - $ref: '#/components/schemas/Book'
        - $ref: '#/components/schemas/Magazine'
        - $ref: '#/components/schemas/DVD'
    Book:
      allOf:
        - $ref: '#/components/schemas/Item'
        - type: object
          properties:
            author:
              type: string
    Magazine:
      allOf:
        - $ref: '#/components/schemas/Item'
        - type: object
          properties:
            issue_number:
              type: integer
    DVD:
      allOf:
        - $ref: '#/components/schemas/Item'
        - type: object
          properties:
            duration:
              type: integer
```

### FastAPI Web Application

Now, let’s update the FastAPI application to use the discriminator property:

```python
from fastapi import FastAPI, HTTPException, Path
from pydantic import BaseModel, Field
from typing import List, Union

app = FastAPI()

class BaseItem(BaseModel):
    id: str
    title: str
    item_type: str

    class Config:
        discriminator = "item_type"

class Book(BaseItem):
    author: str
    item_type: str = Field("book", const=True)

class Magazine(BaseItem):
    issue_number: int
    item_type: str = Field("magazine", const=True)

class DVD(BaseItem):
    duration: int
    item_type: str = Field("dvd", const=True)

Item = Union[Book, Magazine, DVD]

# In-memory storage for items
items = []

@app.get("/items", response_model=List[Item])
def get_items():
    return items

@app.post("/items", response_model=Item, status_code=201)
def add_item(item: Item):
    items.append(item)
    return item

@app.get("/items/{itemId}", response_model=Item)
def get_item(itemId: str = Path(..., description="The ID of the item to retrieve")):
    for item in items:
        if item.id == itemId:
            return item
    raise HTTPException(status_code=404, detail="Item not found")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

### Explanation

1. **Discriminator Property**:
   - We added an `item_type` field to the `BaseItem` class and specified it as the discriminator in the `Config` class.

2. **Subclasses**:
   - Each subclass (`Book`, `Magazine`, `DVD`) overrides the `item_type` field with a constant value using `Field(const=True)` to ensure it is correctly set.

3. **Union Type**:
   - `Item` is defined as a union of the three subclasses.

4. **Endpoints**:
   - The endpoints (`GET /items`, `POST /items`, `GET /items/{itemId}`) remain the same, handling the polymorphic list with the discriminator property to determine the item type.

### Running the Application

Save the code to a file (e.g., `main.py`) and run it using Uvicorn:

```bash
uvicorn main:app --reload
```

This will start the FastAPI web server.
You can interact with the API using the endpoints defined in the OpenAPI specification.
The interactive API documentation will be available at `http://127.0.0.1:8000/docs`,
showing the discriminator property in action.


# -----------------------------------------------------
# Create and run the code as instructed.
#[user@desktop]

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        pushd experiments/openapi/impl/forward/python
            mkdir chatgpt
            pushd chatgpt

                gedit main.py
                    ....
                    ....

                uvicorn main:app


    >   [Zarquan@methionine chatgpt]$                 uvicorn main:app --reload
    >   INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
    >   INFO:     Started reloader process [312884] using watchgod
    >   Process SpawnProcess-1:
    >   Traceback (most recent call last):
    >     ....
    >     ....
    >   pydantic.errors.PydanticUserError: `const` is removed, use `Literal` instead
    >   
    >   For further information visit https://errors.pydantic.dev/2.7/u/removed-kwargs

                gedit main.py

                    -   from typing import List, Union
                    +   from typing import List, Union, Literal

                        class Book(BaseItem):
                            author: str
                    -       item_type: str = Field("book", const=True)
                    +       item_type: str = Literal['book']

                        class Magazine(BaseItem):
                            issue_number: int
                    -       item_type: str = Field("magazine", const=True)
                    +       item_type: str = Literal['magazine']

                        class DVD(BaseItem):
                            duration: int
                    -       item_type: str = Field("dvd", const=True)
                    +       item_type: str = Literal['dvd']


                uvicorn main:app

    >   INFO:     Started server process [313828]
    >   INFO:     Waiting for application startup.
    >   INFO:     Application startup complete.
    >   INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
    >   ....
    >   ....


# -----------------------------------------------------
# Test the service ....
#[user@desktop]

    curl \
        --silent \
        --show-error \
        --request GET \
        http://127.0.0.1:8000/items \
    | jq '.'

    >   []


cat > /tmp/test-001.json << EOF
{
  "id": "chatgpt-001",
  "item_type": "book",
  "title": "Code by LLM",
  "author": "ChatGPT"
}
EOF

    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/json" \
        --data @/tmp/test-001.json \
        http://127.0.0.1:8000/items \
    | jq '.'

    >   {
    >     "id": "chatgpt-001",
    >     "title": "Code by LLM",
    >     "item_type": "book",
    >     "author": "ChatGPT"
    >   }


cat > /tmp/test-002.json << EOF
{
  "id": "chatgpt-002",
  "item_type": "book",
  "title": "Code by LLM",
  "author": "ChatGPT"
}
EOF

    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/json" \
        --data @/tmp/test-002.json \
        http://127.0.0.1:8000/items \
    | jq '.'

    >   {
    >     "id": "chatgpt-002",
    >     "title": "Code by LLM",
    >     "item_type": "book",
    >     "author": "ChatGPT"
    >   }


cat > /tmp/test-003.json << EOF
{
  "id": "chatgpt-003",
  "item_type": "dvd",
  "title": "Code by LLM",
  "duration": 35
}
EOF

    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/json" \
        --data @/tmp/test-003.json \
        http://127.0.0.1:8000/items \
    | jq '.'

    >   {
    >     "id": "chatgpt-003",
    >     "title": "Code by LLM",
    >     "item_type": "dvd",
    >     "duration": 35
    >   }


cat > /tmp/test-004.json << EOF
{
  "id": "chatgpt-004",
  "item_type": "magazine",
  "title": "Code by LLM",
  "issue_number": 4
}
EOF

    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/json" \
        --data @/tmp/test-004.json \
        http://127.0.0.1:8000/items \
    | jq '.'

    >   {
    >     "id": "chatgpt-004",
    >     "title": "Code by LLM",
    >     "item_type": "magazine",
    >     "issue_number": 4
    >   }


    curl \
        --silent \
        --show-error \
        --request GET \
        http://127.0.0.1:8000/items \
    | jq '.'

    >   [
    >     {
    >       "id": "chatgpt-001",
    >       "title": "Code by LLM",
    >       "item_type": "book",
    >       "author": "ChatGPT"
    >     },
    >     {
    >       "id": "chatgpt-002",
    >       "title": "Code by LLM",
    >       "item_type": "book",
    >       "author": "ChatGPT"
    >     },
    >     {
    >       "id": "chatgpt-003",
    >       "title": "Code by LLM",
    >       "item_type": "dvd",
    >       "duration": 35
    >     },
    >     {
    >       "id": "chatgpt-004",
    >       "title": "Code by LLM",
    >       "item_type": "magazine",
    >       "issue_number": 4
    >     }
    >   ]




#
# <meta:header>
#   <meta:licence>
#     Copyright (C) 2024 by Wizzard Solutions Ltd, wizzard@metagrid.co.uk
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#
# AIMetrics: []
#

    Target:

        Ideas for the Protocol Transitioning Tiger Team (P3T).
        https://wiki.ivoa.net/twiki/bin/view/IVOA/DALGWSTigerTeam

    Result:

        Work in progress ...

# -----------------------------------------------------

Include YAML

    Avoid concentrating on JSON only.
    I propose we include YAML as well.

    Onus on authors to include support for YAML unless they can prove it is not appropriate.
    In many cases the automated tools that handle JSON also handle YAML.

    We should define our specifications to use the 'accepts' and 'content-type' headers to select the format.
    Even the initial version of a standard only supports JSON, the specification MUST include the 'accepts' and 'content-type' headers,
    making clear that future versions can handle other formats.

    Do not bake-in JSON in the same way we did with XML.

    YAML has 2 key advantages over JSON, particularly for human readability.
    1) comments
    2) multi-line text
    JSON is a subset of YAML

Avoid relying on specific tools

    Avoid direct dependence on specific tools.
    Early standards were based on SOAP autogenerated from WSDL.
    This turned out to be a bad idea.
    Don't repeat the mistake.

    "Swagger is more modern, simple, and expressive than WSDL"
    https://www.linkedin.com/advice/0/how-do-you-choose-between-wsdl-swagger-documenting

    "WSDL can also be complex, verbose, and rigid, especially for dynamic and flexible web services."
    https://www.linkedin.com/advice/0/how-do-you-choose-between-wsdl-swagger-documenting

    Some of our colleagues used WSDL generated code stubs, but many found them more hassle than they were worth.
    In general, auto-generated code makes it easy to get started.
    But once you know how web services work, it is often easier and more robust to write your own.

    Making our standards Swagger compatible is a good thing.
    Explicitly requiring or relying on Swagger is a bad thing.

    The document text is the base. It describes what is intended.
    It can include or refer to XML, JSON or YAML serializations and schema.
    It can include or refer to Swagger/OpenAPI descriptions
    It can include or refer to BNF and/or PEG grammars.
    .. but the document text is the base.

    Using Swagger/OpenAPI as a validation test for filtering out non-standard stuff is a good thing.
    A web service standard SHOULD be able to be represented in Swagger/OpenAPI.


What about the bad things ?

    Non-idempotent GET requests are bad.
    Even if we can represent them in OpenAPI, we shouldn't.

    Cross-domain vulnerabilities.
    Even if we can represent them in OpenAPI, we shouldn't.

    Part of the original remit for Grid & WebServices was to define recomendations (rules)
    for how we implemented web services.
    Is there a new IVOA note listing the dos and don'ts for web services.

    Identify the bad things in our standards.
    ** Encourage people to report them **
    Figure out how we are going to remove them.


Be flexible

    See the reasoning behind XML Schema Versioning Policies
    https://ivoa.net/documents/Notes/XMLVers/

    Minor versioning is technically accurate, but breaks too many things.

Data models

    Making the standard machine readable facilitates code generation and testing,
    but how do we do that in a format independent way ?

    Choose a sub-set of structures, primary elements (string, text, int, float etc.), lists and maps.
    Avoid things like XML attributes.

    How do we describe a data model in a machine-readable, human-readable, opensource, and portable way ?

Service registration

    Why are we scared of major version changes ?
    If adding new major version change is hard, we should fix (repair) the service registration, not fix (static) the standards.

    Categorise each type of change
        tweaking things
        adding new things
        removing things

    Figure out how we are going to handle each type of change.
    Start working on this now.
    This is the boring part.

    Are we relying on few client and several service implementations ?
    All this should go in an IVOA note, get discussed and endorsed.
    Procedure for evolving changes to IVOA standards.

        How providers register services.
        How clients find services.
        ....









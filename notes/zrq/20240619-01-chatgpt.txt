#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Go back and try running the examples created by ChatGPT.

    Result:

        We learned that requests need to have the right Content-Type header.


# -----------------------------------------------------
# Prompt : "can you generate an example of a fastapi webapp generated from an openapi specification"

Certainly! Below is an example of a FastAPI web application generated from an OpenAPI specification.
For this example, we'll use a simplified OpenAPI specification that defines a simple API for managing a list of books.

### OpenAPI Specification

Here's an example of a simple OpenAPI specification in YAML format:

```yaml
openapi: 3.0.0
info:
  title: Book API
  version: 1.0.0
paths:
  /books:
    get:
      summary: Get a list of books
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created
  /books/{bookId}:
    get:
      summary: Get a book by ID
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        author:
          type: string
```

### FastAPI Web Application

Using the above OpenAPI specification, here's a FastAPI web application:

```python
from fastapi import FastAPI, HTTPException, Path
from pydantic import BaseModel
from typing import List

app = FastAPI()

# Pydantic model based on the OpenAPI schema
class Book(BaseModel):
    id: str
    title: str
    author: str

# In-memory storage for books
books = []

@app.get("/books", response_model=List[Book])
def get_books():
    return books

@app.post("/books", response_model=Book, status_code=201)
def add_book(book: Book):
    books.append(book)
    return book

@app.get("/books/{bookId}", response_model=Book)
def get_book(bookId: str = Path(..., description="The ID of the book to retrieve")):
    for book in books:
        if book.id == bookId:
            return book
    raise HTTPException(status_code=404, detail="Book not found")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

### Explanation

1. **Book Model**: We define a Pydantic model `Book` to match the schema in the OpenAPI specification.
2. **In-Memory Storage**: We use a simple list `books` to store the books in memory.
3. **Endpoints**:
   - `GET /books`: Retrieves the list of books.
   - `POST /books`: Adds a new book to the list.
   - `GET /books/{bookId}`: Retrieves a book by its ID.

### Running the Application

To run the application, save the code to a file (e.g., `main.py`) and run it using Uvicorn:

```bash
uvicorn main:app --reload
```

This will start the FastAPI web server, and you can interact with the API using the
endpoints defined in the OpenAPI specification.
The interactive API documentation will be available at `http://127.0.0.1:8000/docs`.


# -----------------------------------------------------
# Create and run the code as instructed.
#[user@desktop]

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        pushd experiments/openapi/impl/forward/python
            mkdir chatgpt
            pushd chatgpt

                gedit main.py
                    ....
                    ....

                uvicorn main:app --reload

    >   INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
    >   INFO:     Started reloader process [306056] using watchgod
    >   INFO:     Started server process [306058]
    >   INFO:     Waiting for application startup.
    >   INFO:     Application startup complete.
    >   ....
    >   ....


# -----------------------------------------------------
# Test the service ....
#[user@desktop]

    curl \
        --silent \
        --show-error \
        --request GET \
        http://127.0.0.1:8000/books \
    | jq '.'

    >   []


cat > /tmp/test-001.json << EOF
{
  "id": "chatgpt-001",
  "title": "Code by LLM",
  "author": "ChatGPT"
}
EOF

    curl \
        --silent \
        --show-error \
        --request POST \
        --data @/tmp/test-001.json \
        http://127.0.0.1:8000/books \
    | jq '.'

    >   {
    >     "detail": [
    >       {
    >         "type": "model_attributes_type",
    >         "loc": [
    >           "body"
    >         ],
    >         "msg": "Input should be a valid dictionary or object to extract fields from",
    >         "input": "{  \"id\": \"chatgpt-001\",  \"title\": \"Code by LLM\",  \"author\": \"ChatGPT\"}",
    >         "url": "https://errors.pydantic.dev/2.7/v/model_attributes_type"
    >       }
    >     ]
    >   }


    #
    # Going back to earlier examples and add the Content-Type header.
    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/json" \
        --data @/tmp/test-001.json \
        http://127.0.0.1:8000/books \
    | jq '.'

    >   {
    >     "id": "chatgpt-001",
    >     "title": "Code by LLM",
    >     "author": "ChatGPT"
    >   }

    #
    # OK, dumb.
    # So the generated code might have worked after all ..
    # Give it another try.
    #


#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Tidy up the ChatGPT generated code.

    Result:

        Work in progress ...

# -----------------------------------------------------
# Start a new branch.
#[user@desktop]

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        branchname=code-tidy-02
        newbranch=$(date '+%Y%m%d')-zrq-${branchname:?}

        git checkout main

        git checkout -b "${newbranch:?}"

        git push --set-upstream 'origin' "$(git branch --show-current)"



# -----------------------------------------------------
# Move the ChatGPT Java code into a named directory.
#[user@desktop]

        #
        # ChatGPT's Spring code is generated from parcolar-0.3.yaml
        # 20240622-05-chatgpt.txt
        # 20240625-01-summary.txt
        #

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        # Add version name to ChatGPT's Java code.
        pushd experiments/openapi/impl/forward/java/chatgpt/

            git mv server parcolar-0.3

            pushd parcolar-0.3/

                cp -r ../../spring-openapi/.mvn .
                cp    ../../spring-openapi/.gitignore .

                git add .mvn
                git add .gitignore

            popd
        popd

        git add notes/zrq/20240709-02-code-tidy.txt

        git commit -m "Renamed old ChatGPT Java code"
        git push



# -----------------------------------------------------
# Start a new branch.
#[user@desktop]

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        branchname=code-tidy-03
        newbranch=$(date '+%Y%m%d')-zrq-${branchname:?}

        git checkout main

        git checkout -b "${newbranch:?}"

        git push --set-upstream 'origin' "$(git branch --show-current)"


# -----------------------------------------------------
# Move the ChatGPT Python code into a named directory.
#[user@desktop]

        #
        # Looks like ChatGPT's FastAPI code is generated from parcolar-0.1.yaml
        # 20240619-05-chatgpt.txt
        # 20240625-01-summary.txt
        #

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        # Add version name to ChatGPT's Python code.
        pushd experiments/openapi/impl/forward/python/

            # Change the directory name
            git mv chatgpt parcolar-0.1

            mkdir chatgpt

            git mv parcolar-0.1 chatgpt

            pushd chatgpt/parcolar-0.1/
                 git rm -r -f __pycache__/
            popd

            git commit -m "Renamed old ChatGPT Python code"

            pushd chatgpt/parcolar-0.1/
                vi .gitignore
                git add .gitignore
            popd

            git commit -m "Touched .gitignore"

            git push



# -----------------------------------------------------
# Create a pull request, review and merge on GitHub (upstream) ....
#
    ....
    ....


# -----------------------------------------------------
# Merge changes from main repo (upstream).
#[user@desktop]

    source "${HOME:?}/project.env"
    pushd "${PROJECT_CODE}"

        # Checkout our main branch.
        git checkout main

        # Pull any new changes from our fork (origin).
        git pull

        # Fetch the latest changes from the main repository (upstream).
        git fetch upstream

        # Merges the changes from the main branch of the upstream repository.
        git merge upstream/main

        # Sanity check.
        git status

        # Push the merged changes to our fork (origin).
        git push

    popd



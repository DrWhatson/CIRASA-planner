#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Try creating 'forward' or 'contract first' implementation.
        Starting with a Swagger generated OpenAPI spec and using it to generate the server code.
        http://mail.ivoa.net/pipermail/p3t/2024-February/000024.html

    Result:

        Work in progress ...

# -----------------------------------------------------
# Run the ambleck build to generate an initial OpenAPI spec.
#[user@desktop]

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        pushd experiments/ambleck

            ./mvnw spring-boot:run


# -----------------------------------------------------
# Swagger UI and OpenAPI are generated by SpringDoc.
#[user@desktop]

    Documenting a Spring REST API Using OpenAPI 3.0
    https://www.baeldung.com/spring-rest-openapi-documentation

    <dependency>
        <groupId>org.springdoc</groupId>
        <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
    </dependency>

    http://localhost:8080/swagger-ui/index.html
    http://localhost:8080/v3/api-docs


# -----------------------------------------------------
# Request the api-docs document, and we get a compact form JSON document.
#[user@desktop]

    curl \
        --silent \
        --show-error \
        --request GET \
        --header "Accept: application/json" \
        http://localhost:8080/v3/api-docs

    >   {"openapi":"3.0.1","info":{"title":"OpenAPI definition","version":"v0"},"servers":[{"url":"http://localhost:8080","description":"Generated server url"}], ....


# -----------------------------------------------------
# We can expand the compact JSON using 'jq'.
#[user@desktop]

    source "${HOME:?}/pandak.env"

    curl \
        --silent \
        --show-error \
        --request GET \
        --header "Accept: application/json" \
        http://localhost:8080/v3/api-docs \
    | jq '.' \
    | tee "${PANDAK_CODE}/experiments/openapi/ivoa/ambleck-0.1.json"

    >   {
    >     "openapi": "3.0.1",
    >     "info": {
    >       ....
    >     },
    >     "servers": [
    >       ....
    >     ],
    >     "paths": {
    >       ....
    >     },
    >     "components": {
    >       ....
    >     }
    >   }


# -----------------------------------------------------
# SpringDoc doesn't support content negotiation.
#[user@desktop]

    curl \
        --silent \
        --show-error \
        --request GET \
        --header "Accept: application/yaml" \
        http://localhost:8080/v3/api-docs

    >   timestamp: 1718543280431
    >   status: 406
    >   error: "Not Acceptable"
    >   path: "/v3/api-docs"


    curl \
        --silent \
        --show-error \
        --request GET \
        --header "Accept: application/xml" \
        http://localhost:8080/v3/api-docs

    >   <Map><timestamp>2024-06-16T13:08:33.349+00:00</timestamp><status>406</status><error>Not Acceptable</error><path>/v3/api-docs</path></Map>


# -----------------------------------------------------
# SpringDoc does support a YAML alternative on a different URL
# (without content negotiation).
#[user@desktop]

    curl \
        --silent \
        --show-error \
        --request GET \
        http://localhost:8080/v3/api-docs.yaml \
    | yq '.' \
    | tee "${PANDAK_CODE}/experiments/openapi/ivoa/ambleck-0.1.yaml"

    >   openapi: 3.0.1
    >   info:
    >     ....
    >   servers:
    >     ....
    >   paths:
    >     ....
    >   components:
    >     ....

    #
    # Note that even though the Java code uses polymorphisn with the 'type' field as discriminator,
    # this is mapped to a simple 'oneOf' block with no discriminator in the generated OpenAPI spec.
    #

    >   ....
    >         "offer": {
    >           "type": "object",
    >           "properties": {
    >             "executable": {
    >               "oneOf": [
    >                 {
    >                   "$ref": "#/components/schemas/DelayExecutable"
    >                 },
    >                 {
    >                   "$ref": "#/components/schemas/PingExecutable"
    >                 }
    >               ]
    >             },
    >             "resources": {
    >               "$ref": "#/components/schemas/Resources"
    >             }
    >           }
    >   ....

    >   ....
    >       offer:
    >         type: object
    >         properties:
    >           executable:
    >             oneOf:
    >               - $ref: '#/components/schemas/DelayExecutable'
    >               - $ref: '#/components/schemas/PingExecutable'
    >           resources:
    >             $ref: '#/components/schemas/Resources'
    >   ....

    #
    # The discriminator field name and values are not included in the generated OpenAPI spec.
    #


# -----------------------------------------------------
# Initial experiment using the SpringDoc generated spec to generate some Java code.
# https://www.baeldung.com/java-openapi-generator-server
#[user@desktop]

    #
    # Add a sym-link to our OpenAPI spec.
    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        pushd experiments/openapi/impl/forward/java/spring

            ln -s ../../../../ivoa ivoa

        popd
    popd

    #
    # Add the OpenAPI generator plugin to our Maven project.
    # https://www.baeldung.com/java-openapi-generator-server#plugin
    #

    >   ....
    >   <properties>
    >   	....
    >       <schema.yaml>${project.basedir}/ivoa/ambleck-0.1.yaml</schema.yaml>
    >   	....
    >   </properties>
    >   ....
    >   <plugins>
    >       <!--+
    >           | OpenAPI generator from the Spring documentation, without the versions.
    >           | https://www.baeldung.com/java-openapi-generator-server#plugin
    >           +-->
    >       <plugin>
    >           <groupId>org.openapitools</groupId>
    >           <artifactId>openapi-generator-maven-plugin</artifactId>
    >           <!--version>7.1.0</version-->
    >           <executions>
    >               <execution>
    >                   <goals>
    >                       <goal>generate</goal>
    >                   </goals>
    >                   <configuration>
    >                       <inputSpec>
    >                           ${schema.yaml}
    >                       </inputSpec>
    >                       <generatorName>spring</generatorName>
    >                       <apiPackage>com.baeldung.openapi.api</apiPackage>
    >                       <modelPackage>com.baeldung.openapi.model</modelPackage>
    >                       <supportingFilesToGenerate>
    >                           ApiUtil.java
    >                       </supportingFilesToGenerate>
    >                       <configOptions>
    >                           <delegatePattern>true</delegatePattern>
    >                       </configOptions>
    >                   </configuration>
    >               </execution>
    >           </executions>
    >       </plugin>
    >       ....
    >   </plugins>
    >   ....

    #
    # Add the Spring dependencies to our Maven project.
    # https://www.baeldung.com/java-openapi-generator-server#spring
    #

    >   ....
    >   <dependencies>
    >       ....
    >           <!--+
    >               | Dependencies from the Spring documentation, without the versions.
    >               | https://www.baeldung.com/java-openapi-generator-server#spring
    >               +-->
    >           <dependency>
    >               <groupId>org.springframework.boot</groupId>
    >               <artifactId>spring-boot-starter-web</artifactId>
    >               <!--version>2.4.4</version-->
    >           </dependency>
    >           <dependency>
    >               <groupId>org.springframework.data</groupId>
    >               <artifactId>spring-data-jpa</artifactId>
    >               <!--version>2.4.6</version-->
    >           </dependency>
    >           <dependency>
    >               <groupId>org.openapitools</groupId>
    >               <artifactId>jackson-databind-nullable</artifactId>
    >               <!--version>0.2.1</version-->
    >           </dependency>
    >           <dependency>
    >               <groupId>org.springdoc</groupId>
    >               <artifactId>springdoc-openapi-ui</artifactId>
    >               <!--version>1.7.0</version-->
    >           </dependency>
    >       ....
    >   </dependencies>
    >   ....

    >   ....
    >   <dependencies>
    >       ....
    >       <dependency>
    >           <groupId>org.openapitools</groupId>
    >           <artifactId>jackson-databind-nullable</artifactId>
    >           <version>0.2.1</version>
    >       </dependency>
    >       <dependency>
    >           <groupId>org.springdoc</groupId>
    >           <artifactId>springdoc-openapi-ui</artifactId>
    >           <version>1.7.0</version>
    >       </dependency>
    >       ....
    >   </dependencies>
    >   ....


    #
    # Generate the server stub.
    #

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        pushd experiments/openapi/impl/forward/java/spring

            ./mvnw clean install

        popd
    popd

    #
    # Dependency issues caused by the deprecation of old packages.
    # javax.annotation
    # javax.validation
    # javax.servlet
    #
    # https://www.baeldung.com/java-validation
    # https://medium.com/javarevisited/javax-validation-and-groups-acd9a1fb1091
    # https://mkyong.com/spring-boot/package-javax-validation-constraints-does-not-exist/
    #
    # cannot find symbol HttpServletResponse
    #

    #
    # Compile error caused by a name clash with a generated variable.
    # [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.11.0:compile
    #   (default-compile) on project parcolar: Compilation failure
    # [ERROR] /var/local/projects/IVOA/ivoa/CIRASA-planner/github-zrq/experiments/openapi/impl/forward/java/spring/target/generated-sources/openapi/src/main/java/com/baeldung/openapi/api/AmbleckPostApiDelegate.java:[37,32]
    #   variable request is already defined in method ambleckPost(com.baeldung.openapi.model.Request)
    #

    #
    # Our top level requestBody parameter is called 'request'.
    #

    >   ....
    >   requestBody:
    >     content:
    >       application/json:
    >         schema:
    >           $ref: '#/components/schemas/myrequest'
    >       application/xml:
    >         schema:
    >           $ref: '#/components/schemas/myrequest'
    >       application/yaml:
    >         schema:
    >           $ref: '#/components/schemas/myrequest'
    >     required: true
    >   ....

    >   ....
    >   request:
    >     type: object
    >     properties:
    >       executable:
    >         oneOf:
    >           - $ref: '#/components/schemas/DelayExecutable'
    >           - $ref: '#/components/schemas/PingExecutable'
    >       resources:
    >         $ref: '#/components/schemas/Resources'
    >   ....

    #
    # Change 'request' to 'myrequest' and the problem goes away.
    # Bad design of the generator classes.
    #

    >   ....
    >   [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:3.2.4:repackage (repackage) on project parcolar:
    >     Execution repackage of goal org.springframework.boot:spring-boot-maven-plugin:3.2.4:repackage failed:
    >       Unable to find main class -> [Help 1]
    >   ....

    #
    # Problems getting the project to build and run.
    # The OpenAPI plugin creates generated Java clasess, but not a webapp.
    # The SpringBoot tools create an executable webapp, without the generated classes.
    #
    # Easiest is to separate them into two projects.
    # experiments/openapi/impl/forward/java/spring/openapi
    # experiments/openapi/impl/forward/java/spring/webapp

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        pushd experiments/openapi/impl/forward/java

            pushd spring-openapi
                ./mvnw clean
                ./mvnw install
            popd

            pushd spring-webapp
                ./mvnw clean
                ./mvnw spring-boot:run
            popd
    popd

    #
    # Lots of build errors.
    # The generated classes don't replicate the original class hierarchy.
    # The OpenAPI spec doesn't represent the original class hierarchy.
    # The OpenAPI spec doesn't include the discriminator value.
    #
    # Using the generated classes isn't going to work.
    # Too much is missing and too much us broken.
    #








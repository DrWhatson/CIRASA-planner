#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Experiment with the combined data model.
        Everything in one class.
        Based on the parcolar-0.6 datamodel from 20240704-01-combined.

    Result:

        Working Spring/Java code stubs for parcolar-0.6.yaml

# -----------------------------------------------------
# Create a new OpenAPI specification.
#[user@laptop]

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        pushd experiments/openapi/ivoa

            cp parcolar-0.5.yaml \
               parcolar-0.6.yaml

            pluma parcolar-0.6.yaml &


# -----------------------------------------------------
# Try building the Spring server code from the OpenAPI spec.
#[user@laptop]

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        pushd experiments/openapi/impl/forward/java
            pushd spring-openapi

                ./mvnw clean install

                    ....
                    ....
                    ....


# -----------------------------------------------------
# Update the business logic and build the webapp.
#[user@laptop]

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        pushd experiments/openapi/impl/forward/java

            pushd spring-webapp

                ./mvnw clean spring-boot:run


# -----------------------------------------------------
# Test our service.
#[user@laptop]

cat > /tmp/test-001.yaml  << EOF
schedule:
  - start: 2024-07-08T09:30Z/PT30M
    duration:
      min: P1H
      max: P2H
  - start: 2024-07-09T09:30Z/PT30M
    duration:
      min: P1H
      max: P2H
  - start: 2024-07-10T09:30Z/PT30M
    duration:
      min: P1H
      max: P2H
executable:
  name: My test executable
  type: urn:docker-container-0.1
  image: ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13
resources:
  compute:
    - name: My test compute resource
      type: urn:simple-compute-resource
      cores:
        min: 2
        max: 5
      memory:
        min: 20
        max: 50
  storage:
    - name: My test storage resource
      type: urn:simple-storage-resource
      size:
        min: 200
        max: 500
        units: none
  data:
    - name: My test data resource
      type: urn:simple-data-resource
      location: http://data.example.org/downloads/hdf5t8
EOF

    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8082/request" \
    | yq '.'

    >   result: "YES"
    >   offers:
    >     - executable:
    >         type: "urn:docker-container-0.1"
    >         name: "My test executable"
    >         image: "ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13"
    >         privileged: false
    >       offer:
    >         expires: "2024-07-05T20:30:44.119889225+01:00"
    >         status: "OFFERED"


    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/json" \
        "http://127.0.0.1:8082/request" \
    | jq '.'

    >   {
    >     "result": "YES",
    >     "offers": [
    >       {
    >         "executable": {
    >           "type": "urn:docker-container-0.1",
    >           "name": "My test executable",
    >           "image": "ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13",
    >           "privileged": false
    >         },
    >         "offer": {
    >           "expires": "2024-07-05T20:30:58.65169359+01:00",
    >           "status": "OFFERED"
    >         }
    >       }
    >     ]
    >   }


    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/xml" \
        "http://127.0.0.1:8082/request" \
    | xmlstarlet fo

    >   <?xml version="1.0"?>
    >   <OffersResponse>
    >     <result>YES</result>
    >     <offers>
    >       <offers>
    >         <executable type="urn:docker-container-0.1">
    >           <name>My test executable</name>
    >           <image>ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13</image>
    >           <privileged>false</privileged>
    >         </executable>
    >         <offer>
    >           <expires>2024-07-05T20:31:14.745746+01:00</expires>
    >           <status>OFFERED</status>
    >         </offer>
    >       </offers>
    >     </offers>
    >   </OffersResponse>


    yq -o json \
        '.' \
        '/tmp/test-001.yaml' \
    | tee /tmp/test-001.json

    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/json" \
        --data-binary @"/tmp/test-001.json" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8082/request" \
    | yq '.'

    >   result: "YES"
    >   offers:
    >     - executable:
    >         type: "urn:docker-container-0.1"
    >         name: "My test executable"
    >         image: "ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13"
    >         privileged: false
    >       offer:
    >         expires: "2024-07-05T20:31:30.219790376+01:00"
    >         status: "OFFERED"


    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/json" \
        --data-binary @"/tmp/test-001.json" \
        --header "Accept: application/json" \
        "http://127.0.0.1:8082/request" \
    | jq '.'

    >   {
    >     "result": "YES",
    >     "offers": [
    >       {
    >         "executable": {
    >           "type": "urn:docker-container-0.1",
    >           "name": "My test executable",
    >           "image": "ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13",
    >           "privileged": false
    >         },
    >         "offer": {
    >           "expires": "2024-07-05T20:31:44.688997916+01:00",
    >           "status": "OFFERED"
    >         }
    >       }
    >     ]
    >   }


    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/json" \
        --data-binary @"/tmp/test-001.json" \
        --header "Accept: application/xml" \
        "http://127.0.0.1:8082/request" \
    | xmlstarlet fo

    >   <?xml version="1.0"?>
    >   <OffersResponse>
    >     <result>YES</result>
    >     <offers>
    >       <offers>
    >         <executable type="urn:docker-container-0.1">
    >           <name>My test executable</name>
    >           <image>ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13</image>
    >           <privileged>false</privileged>
    >         </executable>
    >         <offer>
    >           <expires>2024-07-05T20:32:00.387072005+01:00</expires>
    >           <status>OFFERED</status>
    >         </offer>
    >       </offers>
    >     </offers>
    >   </OffersResponse>


    yq \
        --output-format xml \
        '{"ParcolarRequest": .}' \
        /tmp/test-001.yaml \
    | tee /tmp/test-001.xml

#
# Doesn't produce valid XML.
#


    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/xml" \
        --data-binary @"/tmp/test-001.xml" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8082/request" \
    | yq '.'

    >   ....
    >   ....


    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/xml" \
        --data-binary @"/tmp/test-001.xml" \
        --header "Accept: application/json" \
        "http://127.0.0.1:8082/request" \
    | jq '.'

    >   ....
    >   ....


    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/xml" \
        --data-binary @"/tmp/test-001.xml" \
        --header "Accept: application/xml" \
        "http://127.0.0.1:8082/request" \
    | xmlstarlet fo

    >   ....
    >   ....


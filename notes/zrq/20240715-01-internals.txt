#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2024, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Implement some initial business logic, building on the
        code generated by ChatGPT on 20240711.

        From 20240711-01-chatgpt :

            Using ChatGPT to generate FastAPI server code, based on the
            openapi-0.6 datamodel from 20240704-01-combined.

    Result:

        ChatGP's code looks OK to start with.
        Turns out to be using a different technique for handling the serialization.
        Lots of regression, needing lots of manual edits.

        Managed to get JSON and YAML input and output working.

            YAML in YAML out - pass
            YAML in JSON out - pass
            YAML in XML out - pass

            JSON in JSON out - pass
            JSON in YAML out - pass
            JSON in XML out - pass

            XML in - fail

        Spent a lot of time fixing the generated API code that we
        didn't get much of the business logic done.

        In the process we identified an issue with out data model.
        https://github.com/ivoa/CIRASA-planner/issues/25

            All the resources have uuids, the executable has a uuid, but the execution itself doesn't.
            That's the one thing that is referenced in a wesbervice path /execution/{uuid}, and we don't assign it a uuid.

        Problem is, this will mean changing the datamodel, which will mean re-generating
        the service API code, which will mean re-applying all the manual edits.

        This shows the high cost of a partial generation requiring a lot of manual fixes.

# -----------------------------------------------------
# Checkout our working branch.
#[user@desktop]

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        git checkout '20240712-zrq-internals'

    >   ....
    >   ....


# -----------------------------------------------------
# Launch a container to run the code.
#[user@laptop]

    source "${HOME:?}/pandak.env"
    pushd "${PANDAK_CODE}"

        pushd experiments/openapi/

            podman run \
                --rm \
                --tty \
                --interactive \
                --publish '8000:8000' \
                --volume "$(pwd)/impl/forward/python/chatgpt:/chatgpt:rw,z" \
                fedora \
                bash


# -----------------------------------------------------
# Install our dependencies ..
#[root@container]

    dnf install -y python3-pip

    pip3 install fastapi pyyaml pydantic[extra] uvicorn dicttoxml

    >   ....
    >   ....


# -----------------------------------------------------
# Run our webapp ..
#[root@container]

    pushd /chatgpt/webapp-0.6

        uvicorn main:app

    >   ....
    >   ....


# -----------------------------------------------------
# Test our service.
#[user@laptop]

cat > /tmp/test-001.yaml  << EOF
schedule:
  - start: 2024-07-08T09:30Z/PT30M
    duration:
      min: P1H
      max: P2H
  - start: 2024-07-09T09:30Z/PT30M
    duration:
      min: P1H
      max: P2H
  - start: 2024-07-10T09:30Z/PT30M
    duration:
      min: P1H
      max: P2H
executable:
  name: My test executable
  type: urn:docker-container-0.1
  image: ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13
  network:
    ports:
      - internal: 3000
        protocol: TCP
resources:
  compute:
    - name: My test compute resource
      type: urn:simple-compute-resource
      cores:
        min: 2
        max: 5
      memory:
        min: 20
        max: 50
  storage:
    - name: My test storage resource
      type: urn:simple-storage-resource
      size:
        min: 200
        max: 500
        units: none
  data:
    - name: My test data resource
      type: urn:simple-data-resource
      location: http://data.example.org/downloads/hdf5t8
EOF

    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8000/request" \
    | jq -r '.detail' \
    | sed 's/\\n/\n/g'

    >   8 validation errors for OffersRequest
    >   executable.ident
    >     Field required [type=missing, input_value={'name': 'My test executa...0, 'protocol': 'TCP'}]}}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   executable.properties
    >     Field required [type=missing, input_value={'name': 'My test executa...0, 'protocol': 'TCP'}]}}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   resources.compute.0.ident
    >     Field required [type=missing, input_value={'name': 'My test compute... {'min': 20, 'max': 50}}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   resources.compute.0.properties
    >     Field required [type=missing, input_value={'name': 'My test compute... {'min': 20, 'max': 50}}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   resources.storage.0.ident
    >     Field required [type=missing, input_value={'name': 'My test storage...: 500, 'units': 'none'}}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   resources.storage.0.properties
    >     Field required [type=missing, input_value={'name': 'My test storage...: 500, 'units': 'none'}}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   resources.data.0.ident
    >     Field required [type=missing, input_value={'name': 'My test data re...e.org/downloads/hdf5t8'}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   resources.data.0.properties
    >     Field required [type=missing, input_value={'name': 'My test data re...e.org/downloads/hdf5t8'}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing

    #
    # The validation step is ignoring the Optional[] type hints.
    # Try the JSON version.
    #

    yq \
        -o json \
        '.' \
        /tmp/test-001.yaml \
    | tee /tmp/test-001.json

    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/json" \
        --data-binary @"/tmp/test-001.json" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8000/request" \
    | jq -r '.detail' \
    | sed 's/\\n/\n/g'

    >   8 validation errors for OffersRequest
    >   executable.ident
    >     Field required [type=missing, input_value={'name': 'My test executa...0, 'protocol': 'TCP'}]}}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   executable.properties
    >     Field required [type=missing, input_value={'name': 'My test executa...0, 'protocol': 'TCP'}]}}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   resources.compute.0.ident
    >     Field required [type=missing, input_value={'name': 'My test compute... {'min': 20, 'max': 50}}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   resources.compute.0.properties
    >     Field required [type=missing, input_value={'name': 'My test compute... {'min': 20, 'max': 50}}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   resources.storage.0.ident
    >     Field required [type=missing, input_value={'name': 'My test storage...: 500, 'units': 'none'}}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   resources.storage.0.properties
    >     Field required [type=missing, input_value={'name': 'My test storage...: 500, 'units': 'none'}}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   resources.data.0.ident
    >     Field required [type=missing, input_value={'name': 'My test data re...e.org/downloads/hdf5t8'}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   resources.data.0.properties
    >     Field required [type=missing, input_value={'name': 'My test data re...e.org/downloads/hdf5t8'}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing

    #
    # Try using the Union syntax didn't work
    # ident: str | None
    #
    # Try adding the missing feilds.
    #

cat > /tmp/test-001.yaml  << EOF
schedule:
  - start: 2024-07-08T09:30Z/PT30M
    duration:
      min: P1H
      max: P2H
  - start: 2024-07-09T09:30Z/PT30M
    duration:
      min: P1H
      max: P2H
  - start: 2024-07-10T09:30Z/PT30M
    duration:
      min: P1H
      max: P2H
executable:
  ident: xxxx
  properties:
  name: My test executable
  type: urn:docker-container-0.1
  image: ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13
  network:
    ports:
      - internal: 3000
        protocol: TCP
resources:
  compute:
    - ident: xxxx
      properties:
      name: My test compute resource
      type: urn:simple-compute-resource
      cores:
        min: 2
        max: 5
      memory:
        min: 20
        max: 50
  storage:
    - ident: xxxx
      properties:
      name: My test storage resource
      type: urn:simple-storage-resource
      size:
        min: 200
        max: 500
        units: none
  data:
    - ident: xxxx
      properties:
      name: My test data resource
      type: urn:simple-data-resource
      location: http://data.example.org/downloads/hdf5t8
EOF

    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8000/request" \
    | jq -r '.detail' \
    | sed 's/\\n/\n/g'

    #
    # Filling in the missing values gets us to the next stage.
    # Now we get errors on the server side when it tries to build the response.
    #

    >   ....
    >   ....
    >     File "/chatgpt/webapp-0.6/main.py", line 120, in process
    >       response = OffersResponse()
    >                  ^^^^^^^^^^^^^^^^
    >     File "/usr/local/lib/python3.12/site-packages/pydantic/main.py", line 193, in __init__
    >       self.__pydantic_validator__.validate_python(data, self_instance=self)
    >   pydantic_core._pydantic_core.ValidationError: 3 validation errors for OffersResponse
    >   result
    >     Field required [type=missing, input_value={}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   offers
    >     Field required [type=missing, input_value={}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing
    >   messages
    >     Field required [type=missing, input_value={}, input_type=dict]
    >       For further information visit https://errors.pydantic.dev/2.8/v/missing

    #
    # Edit the code to explicitly state the default as None
    # Optional[type] = None
    #

    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8000/request" \
    | jq -r '.detail' \
    | sed 's/\\n/\n/g'


    #
    # Defaulting to none works.
    # Optional[type] = None
    #
    # More errors and bugs ...
    # Finally get to the yaml serialization, and it is missing.
    #

    >   ....
    >   ....
    >     File "/usr/local/lib/python3.12/site-packages/pydantic/main.py", line 828, in __getattr__
    >       raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
    >   AttributeError: 'OffersResponse' object has no attribute 'yaml'

    #
    # Try the JSON version.
    #

    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/json" \
        "http://127.0.0.1:8000/request" \

    >   ....
    >   ....
    >     File "/chatgpt/webapp-0.6/main.py", line 116, in ambleck_post
    >       return JSONResponse(content=jsonable_encoder(responseobj))

    #
    # Looks like ChatGPT has taken shortcuts with all of the serialization.
    # ChatGPT skipped the enums entirely.
    # It hasn't implemented the yaml() and xml() methods.
    #
    # Interesting that it did get all of this right in an earlier version.
    # experiments/openapi/impl/forward/python/chatgpt/parcolar-0.1/server-012.py
    #
    # Easiest way to fix it is to manually copy the correct structures across.
    # ... manual editing ..
    #

    # YAML in YAML out
    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8000/request" \
    | yq '.'

    >   result: 'YES'
    >   offers:
    >     - executable:
    >         uuid: 8bdb4576-42b3-11ef-a794-f277f9ff9f7c
    >         name: My test executable
    >         properties: null
    >         type: urn:docker-container-0.1
    >       resources: null
    >       schedule: null
    >       offer:
    >         status: OFFERED
    >         expires: '2024-07-15T14:16:24.742360'
    >       execution: null
    >   messages: null

    # YAML in JSON out
    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/json" \
        "http://127.0.0.1:8000/request" \
    | jq '.'

    >   {
    >     "result": "YES",
    >     "offers": [
    >       {
    >         "executable": {
    >           "uuid": "8bdb4576-42b3-11ef-a794-f277f9ff9f7c",
    >           "name": "My test executable",
    >           "properties": null,
    >           "type": "urn:docker-container-0.1"
    >         },
    >         "resources": null,
    >         "schedule": null,
    >         "offer": {
    >           "status": "OFFERED",
    >           "expires": "2024-07-15T14:16:46.545999"
    >         },
    >         "execution": null
    >       }
    >     ],
    >     "messages": null
    >   }


    # YAML in XML out
    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/yaml" \
        --data-binary @"/tmp/test-001.yaml" \
        --header "Accept: application/xml" \
        "http://127.0.0.1:8000/request" \
    | xmlstarlet fo

    >   <?xml version="1.0" encoding="utf-8"?>
    >   <excution-offers>
    >     <result>YES</result>
    >     <offers>
    >       <offer>
    >         <executable>
    >           <uuid>8bdb4576-42b3-11ef-a794-f277f9ff9f7c</uuid>
    >           <name>My test executable</name>
    >           <properties/>
    >           <type>urn:docker-container-0.1</type>
    >         </executable>
    >         <resources/>
    >         <schedule/>
    >         <offer>
    >           <status>OFFERED</status>
    >           <expires>2024-07-15T14:16:03.423794</expires>
    >         </offer>
    >         <execution/>
    >       </offer>
    >     </offers>
    >     <messages/>
    >   </excution-offers>


    # JSON in JSON out
    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/json" \
        --data-binary @"/tmp/test-001.json" \
        --header "Accept: application/json" \
        "http://127.0.0.1:8000/request" \
    | jq '.'

    >   {
    >     "result": "YES",
    >     "offers": [
    >       {
    >         "executable": {
    >           "uuid": "8bdb4576-42b3-11ef-a794-f277f9ff9f7c",
    >           "name": "My test executable",
    >           "properties": null,
    >           "type": "urn:docker-container-0.1"
    >         },
    >         "resources": null,
    >         "schedule": null,
    >         "offer": {
    >           "status": "OFFERED",
    >           "expires": "2024-07-15T14:18:02.873505"
    >         },
    >         "execution": null
    >       }
    >     ],
    >     "messages": null
    >   }


    # JSON in YAML out
    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/json" \
        --data-binary @"/tmp/test-001.json" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8000/request" \
    | yq '.'

    >   result: 'YES'
    >   offers:
    >     - executable:
    >         uuid: 8bdb4576-42b3-11ef-a794-f277f9ff9f7c
    >         name: My test executable
    >         properties: null
    >         type: urn:docker-container-0.1
    >       resources: null
    >       schedule: null
    >       offer:
    >         status: OFFERED
    >         expires: '2024-07-15T14:18:39.734172'
    >       execution: null
    >   messages: null


    # JSON in XML out
    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/json" \
        --data-binary @"/tmp/test-001.json" \
        --header "Accept: application/xml" \
        "http://127.0.0.1:8000/request" \
    | xmlstarlet fo

    >   <?xml version="1.0" encoding="utf-8"?>
    >   <excution-offers>
    >     <result>YES</result>
    >     <offers>
    >       <offer>
    >         <executable>
    >           <uuid>8bdb4576-42b3-11ef-a794-f277f9ff9f7c</uuid>
    >           <name>My test executable</name>
    >           <properties/>
    >           <type>urn:docker-container-0.1</type>
    >         </executable>
    >         <resources/>
    >         <schedule/>
    >         <offer>
    >           <status>OFFERED</status>
    >           <expires>2024-07-15T14:19:41.511660</expires>
    >         </offer>
    >         <execution/>
    >       </offer>
    >     </offers>
    >     <messages/>
    >   </excution-offers>


# -----------------------------------------------------
# Create some XML test data.
#[user@laptop]

cat > /tmp/test-001.xml << EOF
<execution-request>
  <executable>
    <name>My test executable</name>
    <type>urn:docker-container-0.1</type>
    <image>ghcr.io/ivoa/oligia-webtop:ubuntu-2022.01.13</image>
    <network>
      <ports>
        <port>
          <internal>3000</internal>
          <protocol>TCP</protocol>
        </port>
      </ports>
    </network>
  </executable>
</execution-request>
EOF

    curl \
        --silent \
        --show-error \
        --request POST \
        --header "Content-Type: application/xml" \
        --data-binary @"/tmp/test-001.xml" \
        --header "Accept: application/yaml" \
        "http://127.0.0.1:8000/request" \
    | yq '.'

    >   {"detail": "'/execution-request'"}

    >   INFO:     127.0.0.1:39002 - "POST /request HTTP/1.1" 400 Bad Request









from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.simple_storage_resource import SimpleStorageResource
from openapi_server import util


class AbstractStorageResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, name=None, spec=None):  # noqa: E501
        """AbstractStorageResource - a model defined in OpenAPI

        :param type: The type of this AbstractStorageResource.  # noqa: E501
        :type type: str
        :param name: The name of this AbstractStorageResource.  # noqa: E501
        :type name: str
        :param spec: The spec of this AbstractStorageResource.  # noqa: E501
        :type spec: object
        """
        self.openapi_types = {
            'type': str,
            'name': str,
            'spec': object
        }

        self.attribute_map = {
            'type': 'type',
            'name': 'name',
            'spec': 'spec'
        }

        self._type = type
        self._name = name
        self._spec = spec

    @classmethod
    def from_dict(cls, dikt) -> 'AbstractStorageResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AbstractStorageResource of this AbstractStorageResource.  # noqa: E501
        :rtype: AbstractStorageResource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this AbstractStorageResource.


        :return: The type of this AbstractStorageResource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this AbstractStorageResource.


        :param type: The type of this AbstractStorageResource.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self) -> str:
        """Gets the name of this AbstractStorageResource.


        :return: The name of this AbstractStorageResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AbstractStorageResource.


        :param name: The name of this AbstractStorageResource.
        :type name: str
        """

        self._name = name

    @property
    def spec(self) -> object:
        """Gets the spec of this AbstractStorageResource.


        :return: The spec of this AbstractStorageResource.
        :rtype: object
        """
        return self._spec

    @spec.setter
    def spec(self, spec: object):
        """Sets the spec of this AbstractStorageResource.


        :param spec: The spec of this AbstractStorageResource.
        :type spec: object
        """

        self._spec = spec
